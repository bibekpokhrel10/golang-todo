// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/model.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"
	models "std/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTodoItemModels is a mock of TodoItemModels interface.
type MockTodoItemModels struct {
	ctrl     *gomock.Controller
	recorder *MockTodoItemModelsMockRecorder
}

// MockTodoItemModelsMockRecorder is the mock recorder for MockTodoItemModels.
type MockTodoItemModelsMockRecorder struct {
	mock *MockTodoItemModels
}

// NewMockTodoItemModels creates a new mock instance.
func NewMockTodoItemModels(ctrl *gomock.Controller) *MockTodoItemModels {
	mock := &MockTodoItemModels{ctrl: ctrl}
	mock.recorder = &MockTodoItemModelsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoItemModels) EXPECT() *MockTodoItemModelsMockRecorder {
	return m.recorder
}

// CreateItemModel mocks base method.
func (m *MockTodoItemModels) CreateItemModel(d string) (models.TodoItemModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemModel", d)
	ret0, _ := ret[0].(models.TodoItemModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItemModel indicates an expected call of CreateItemModel.
func (mr *MockTodoItemModelsMockRecorder) CreateItemModel(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemModel", reflect.TypeOf((*MockTodoItemModels)(nil).CreateItemModel), d)
}

// DeleteItemByID mocks base method.
func (m *MockTodoItemModels) DeleteItemByID(Id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemByID", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemByID indicates an expected call of DeleteItemByID.
func (mr *MockTodoItemModelsMockRecorder) DeleteItemByID(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemByID", reflect.TypeOf((*MockTodoItemModels)(nil).DeleteItemByID), Id)
}

// GetItemByID mocks base method.
func (m *MockTodoItemModels) GetItemByID(Id int) (models.TodoItemModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByID", Id)
	ret0, _ := ret[0].(models.TodoItemModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByID indicates an expected call of GetItemByID.
func (mr *MockTodoItemModelsMockRecorder) GetItemByID(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByID", reflect.TypeOf((*MockTodoItemModels)(nil).GetItemByID), Id)
}

// GetTodoItems mocks base method.
func (m *MockTodoItemModels) GetTodoItems(completed bool) ([]models.TodoItemModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoItems", completed)
	ret0, _ := ret[0].([]models.TodoItemModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoItems indicates an expected call of GetTodoItems.
func (mr *MockTodoItemModelsMockRecorder) GetTodoItems(completed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoItems", reflect.TypeOf((*MockTodoItemModels)(nil).GetTodoItems), completed)
}

// UpdateItemModel mocks base method.
func (m *MockTodoItemModels) UpdateItemModel(completed bool, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemModel", completed, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemModel indicates an expected call of UpdateItemModel.
func (mr *MockTodoItemModelsMockRecorder) UpdateItemModel(completed, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemModel", reflect.TypeOf((*MockTodoItemModels)(nil).UpdateItemModel), completed, id)
}
